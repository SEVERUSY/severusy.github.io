{"meta":{"title":"SEVERUSY","subtitle":null,"description":"气吞万里如虎","author":"Severusy","url":"http://yoursite.com"},"pages":[{"title":"about","date":"2017-05-20T13:30:22.000Z","updated":"2017-05-20T13:38:20.671Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"天下没有永远阴霾的天空，只要让生命的太阳自内心升起。 --简媜 ABOUT ME CUMT在读 分享代码，读书和感动 谢谢你来关注我"}],"posts":[{"title":"HEXO相关错误","slug":"hexo-error","date":"2017-05-20T09:26:10.000Z","updated":"2017-05-20T11:32:50.706Z","comments":true,"path":"2017/05/20/hexo-error/","link":"","permalink":"http://yoursite.com/2017/05/20/hexo-error/","excerpt":"","text":"hexo搭建博客这个网上一搜就有，我用的是windows，我就不赘述了。单说一下在搭建博客时出现的坑： 1、误用linux的安装方式来安装，返回错误 bush：sudo command not found 还以为环境变量出了问题一直在修改path 经长航大佬 指点换了另外的安装姿势 详见代码咖啡.这才顺利安装完毕 $ 2、用淘宝NPM镜像安装node.js package management[可能] 链接 安装方法就是先安装cnpm $ npm install -g cnpm --registry=https://registry.npm.taobao.org 然后安装你要安装的那一块内容 $ cnpm install hexo-renderer-sass --save [ 要安装的那个模块 ] 剩下的部分还没有试，但要安装的已经安装完毕 3、部署到github上时出现错误 在执行 hexo deploy 后 出现 error deployer not found:git 的错误 经查询，hexo更新到3.0后deploy的type应改成git 我的hexo已经是3.0以上版本，type也已是git，仍失败 根据返回错误分析，应该是git这种deploy方法没有找到 于是使用 npm install hexo-deployer-git --save 之后解决，解决方法来源于Melodic 4、在hexo中插入图片 使用了插件 asset-image 利用了hexo的创建资源文件夹 详见在hexo中无痛插入图片 不过后来我改成用图床上传图片然后用链接来上传图片了 最后膜拜一个非常厉害的大佬iIimeTraveler和一篇文章Hexo常见问题解决方案","categories":[{"name":"techn","slug":"techn","permalink":"http://yoursite.com/categories/techn/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"dict与数据设置","slug":"dict-set","date":"2017-05-20T09:10:54.000Z","updated":"2017-05-20T11:35:28.742Z","comments":true,"path":"2017/05/20/dict-set/","link":"","permalink":"http://yoursite.com/2017/05/20/dict-set/","excerpt":"","text":"dict和setpython内置了字典 根据同学的名字查找成绩-利用list names = [&apos;Michael&apos;,&apos;Bob&apos;,&apos;Tracy&apos;] scores = [95,75,85] -利用dict &gt;&gt;&gt; d = {&apos;Michael&apos;:95,&apos;Bob&apos;:75,&apos;Tracy&apos;:85} &gt;&gt;&gt; d[&apos;Michael&apos;] 95 注意：利用dict时使用的是{ }而非[ ] -利用dict-通过key给出数据 &gt;&gt;&gt; d[&apos;Adam&apos;] = 67 &gt;&gt;&gt; d[&apos;Adam&apos;] 67 1个key对应1个value值，多次对1个key放入value，后面的值有效 key不存在，dict会报错，为避免key不存在的错误，有两种方法： 1、通过in &gt;&gt;&gt; &apos;Thomas&apos; in d False 2、通过dict提供的get方法 &gt;&gt;&gt; d.get(&apos;Thomas&apos;) &gt;&gt;&gt; 返回none，python的交互式命令行不显示结果 &gt;&gt;&gt; d.get(&apos;Thomas&apos;,-1) &gt;&gt;&gt; -1 自己设置如果找不到Thomas的返回值为-1，如果找不到，就返回-1 &gt;&gt;&gt; d.get(&apos;Michael&apos;,-1) &gt;&gt;&gt; 95 找得到就返回对应的value dict内部存放顺序与key的放入顺序无关","categories":[{"name":"techn","slug":"techn","permalink":"http://yoursite.com/categories/techn/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-05-20T07:34:47.717Z","updated":"2017-05-20T07:34:47.717Z","comments":true,"path":"2017/05/20/hello-world/","link":"","permalink":"http://yoursite.com/2017/05/20/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"值班记录","slug":"zhibanjilu","date":"2017-05-20T06:09:16.000Z","updated":"2017-05-20T11:32:17.348Z","comments":true,"path":"2017/05/20/zhibanjilu/","link":"","permalink":"http://yoursite.com/2017/05/20/zhibanjilu/","excerpt":"","text":"开发注意事项管理员模块1.注意添加管理员模式 否则后期修改时都到数据库中不成样子 2.可以弱密码测试，但不可以弱密码交付，后面的人基本不会更改 3.密码不可以明文存储 文档撰写开发文档要写好 包括数据库每个字段的用处 以及如果有接入API，参数等都要写好 这样才能给后面的人提供方便","categories":[{"name":"翔工作室","slug":"翔工作室","permalink":"http://yoursite.com/categories/翔工作室/"}],"tags":[{"name":"会议记录","slug":"会议记录","permalink":"http://yoursite.com/tags/会议记录/"}]},{"title":"cmd命令","slug":"cmdwords","date":"2017-05-19T16:00:00.000Z","updated":"2017-05-20T11:34:52.019Z","comments":true,"path":"2017/05/20/cmdwords/","link":"","permalink":"http://yoursite.com/2017/05/20/cmdwords/","excerpt":"","text":"命令行转移盘符1、直接在cmd打开后输入要进入的盘符比如说要进入d盘就直接输入d：回车就可以进入 C:\\Users\\ROOT&gt;d: D:\\&gt; 2、如果要打开具体文件夹可以先用dir查询现在所在目录下的内容然后再用cd进一步操作进入文件夹","categories":[{"name":"techn","slug":"techn","permalink":"http://yoursite.com/categories/techn/"}],"tags":[{"name":"dos","slug":"dos","permalink":"http://yoursite.com/tags/dos/"}]},{"title":"函数","slug":"function","date":"2017-05-18T14:44:25.000Z","updated":"2017-05-20T11:14:30.764Z","comments":true,"path":"2017/05/18/function/","link":"","permalink":"http://yoursite.com/2017/05/18/function/","excerpt":"","text":"调用函数python内置函数官方文档中的函数 调用函数可以直接用python内置函数把一种数据类型变成另一种数据类型 定义函数","categories":[{"name":"techn","slug":"techn","permalink":"http://yoursite.com/categories/techn/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"循环","slug":"circle","date":"2017-05-14T11:49:41.000Z","updated":"2017-05-20T11:34:32.549Z","comments":true,"path":"2017/05/14/circle/","link":"","permalink":"http://yoursite.com/2017/05/14/circle/","excerpt":"","text":"循环python有两种循环 for x in…循环 这个循环是依次把list或者tuple中的每个元素迭代出来 也就是把每个元素代入变量x， 然后用x执行缩进块的语句 sum = 0 for x in [1,2,3,4,5,6,7,8,9,10]: sum = sum + x print(sum) 上面这段代码的输出： 1 3 6 10 15 21 28 36 45 55 range()函数，给定范围，从0开始，range(5)相当于[0,5) 以下，用range()生成一个整数序列，然后通过list()函数转化为list &gt;&gt;&gt; list(range(5)) [0, 1, 2, 3, 4] while循环只要条件满足，就不断循环 sum = 0 n = 99 while n &gt; 0: sum = sum + n n = n - 2 print(sum) 练习请利用循环依次对list中的每个名字打印出Hello, xxx! L = [&apos;Bart&apos;, &apos;Lisa&apos;, &apos;Adam&apos;] for x in L: print(&apos;Hello, %s !&apos; % x) 输出结果： Hello, Bart ! Hello, Lisa ! Hello, Adam ! breakn = 1 while n&lt;= 100: if n &gt; 10: break print(n) n = n + 1 print(&apos;END&apos;) break 用于提前结束循环 continue跳过当前循环，开始下一次循环 continue 打印奇数n = 0 while n &lt; 10: n = n+1 if n % 2 == 0: continue print(n) break和continue要与if配合使用","categories":[{"name":"techn","slug":"techn","permalink":"http://yoursite.com/categories/techn/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"条件","slug":"if-else","date":"2017-05-14T10:01:02.000Z","updated":"2017-05-20T11:32:36.601Z","comments":true,"path":"2017/05/14/if-else/","link":"","permalink":"http://yoursite.com/2017/05/14/if-else/","excerpt":"","text":"条件判断1、格式：（注意冒号 ：） if &lt;条件判断1&gt;： &lt;执行1&gt; elif &lt;条件判断2&gt;： &lt;执行2&gt; else： &lt;执行3&gt; 2、if语句执行从上往下判断，如果在某个判断上是True，把该判断对应的语句执行后，就忽略掉剩下的elif和else input用input()读取用户输入 D:\\code\\py&gt;python if.py birth:1997 返回 报错 Traceback (most recent call last): File &quot;if.py&quot;, line 19, in &lt;module&gt; if birth &lt; 2000 TypeError: &apos;&lt;&apos; not supported between instances of &apos;str&apos; and &apos;int&apos; 原因： input()返回的数据类型是 str ，str不能直接跟整数比较，必须先把 str 转换成整数 int()可以吧str转换成整数，就可以用输入的1997和2000进行比较了 如果输入abc，则int()函数会因为发现输入的是字符串不是数字而报错，程序退出 练习小明身高1.75，体重80.5kg。请根据BMI公式（体重除以身高的平方）帮小明计算他的BMI指数，并根据BMI指数： 低于18.5：过轻18.5-25：正常25-28：过重28-32：肥胖高于32：严重肥胖用if-elif判断并打印结果： # -*- coding: utf-8 -*- height = 1.75 weight = 80.5 bmi = weight/(height*height) if bmi &lt; 0: pass elif bmi &lt; 18.5: print(&apos;过轻&apos;) elif bmi &gt;= 18.5 and bmi &lt; 25: print(&apos;正常&apos;) elif bmi &gt;= 25 and bmi &lt; 28: print(&apos;过重&apos;) elif bmi &gt;= 28 and bmi &lt; 32: print(&apos;肥胖&apos;) elif bmi &gt;=32 : print(&apos;严重肥胖&apos;) 这段代码我直接粘贴后 运行 返回了如下错误： File &quot;if.py&quot;, line 26 height = 1.75 ^ IndentationError: unexpected indent 百度后得到 python是一种对缩进非常敏感的语言，最常见的情况是tab和空格的混用会导致错误，或者缩进不对，而这是用肉眼无法分别的。 经重新敲了一遍所有的空格后，终于成功了==以后要注意这样的问题。","categories":[{"name":"techn","slug":"techn","permalink":"http://yoursite.com/categories/techn/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"list和tuple数据类型","slug":"list-tuple","date":"2017-05-13T12:57:05.000Z","updated":"2017-05-20T11:32:27.259Z","comments":true,"path":"2017/05/13/list-tuple/","link":"","permalink":"http://yoursite.com/2017/05/13/list-tuple/","excerpt":"","text":"使用list和tuplelist（一种数据类型,有序）&gt;&gt;&gt; classmates = [&apos;Michael&apos;,&apos;Bob&apos;,&apos;Tracy&apos;] &gt;&gt;&gt; classmates [&apos;Michael&apos;,&apos;Bob&apos;,&apos;Tracy&apos;] 1、向list中追加元素到末尾 &gt;&gt;&gt; classmates.append(&apos;Adam&apos;) &gt;&gt;&gt; classmates [&apos;Michael&apos;,&apos;Bob&apos;,&apos;Tracy&apos;,&apos;Adam&apos;] 2、把元素插入指定位置，比如索引号为1的位置： &gt;&gt;&gt; classmates.insert(1,&apos;Jack&apos;) &gt;&gt;&gt; classmates [&apos;Michael&apos;,&apos;Jack&apos;,&apos;Bob&apos;,&apos;Tracy&apos;,&apos;Adam&apos;] 3、删除list末尾的元素 &gt;&gt;&gt; classmates.pop() &apos;Adam&apos; &gt;&gt;&gt; classmates [&apos;Michael&apos;,&apos;Bob&apos;,&apos;Tracy&apos;] 4、删除指定位置的元素 &gt;&gt;&gt; classmates[1] = &apos;Sarah&apos; &gt;&gt;&gt; classmates [&apos;Michael&apos;,&apos;Sarah&apos;,&apos;Tracy&apos;] 5、list中的元素可以是不同的数据类型 list可以嵌套使用 相当于二维数组，三维… list可以是空list &gt;&gt;&gt; L = [] &gt;&gt;&gt; len(L) 0 tuple (元组 有序 初始化后不可修改)&gt;&gt;&gt; classmates = (&apos;Michael&apos;,&apos;Bob&apos;,&apos;Tracy&apos;) 这时classmates就不可以更改了，只能获取元素，比如说使用classmates[0],但是不能赋值成其他元素 1、在定义tuple的时候，其中的元素就必须被确定下来 2、如果要定义一个空的tuple，可以 &gt;&gt;&gt; t = () &gt;&gt;&gt; t () 3、如果要定义只有一个元素的tuple，需要给一个元素的tuple在定义时加一个逗号，来消除歧义 &gt;&gt;&gt; t=(1,) &gt;&gt;&gt; t &gt;&gt;&gt; (1,) 不加逗号的()按照表示数学公式中的小括号来进行计算 4、可变的 tuple &gt;&gt;&gt; t = (&apos;a&apos;,&apos;b&apos;,[&apos;A&apos;,&apos;B&apos;]) &gt;&gt;&gt; t[2][0] = &apos;X&apos; &gt;&gt;&gt; t[2][1] = &apos;Y&apos; &gt;&gt;&gt; t &gt;&gt;&gt; (&apos;a&apos;,&apos;b&apos;,[&apos;X&apos;,&apos;Y&apos;]) 其实是用一个tuple里包含一个list元素，然后list元素可以改变","categories":[{"name":"techn","slug":"techn","permalink":"http://yoursite.com/categories/techn/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"字符与编码","slug":"char-ord","date":"2017-05-13T06:45:01.000Z","updated":"2017-05-20T11:34:03.903Z","comments":true,"path":"2017/05/13/char-ord/","link":"","permalink":"http://yoursite.com/2017/05/13/char-ord/","excerpt":"","text":"字符与编码计算机中的编码 原本各国有各国不同的编码标准，标准不同就会产生冲突，在多语言混合的文本中显示出来就会有乱码。所以产生了Unicode。 Unicode是把所有语言统一到一套编码里，但所有内容全部用Unicode编码的话，会有很多的空间浪费。所以产生了可变长编码的UTF-8编码。 UTF-8把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常为3个字节，生僻的字符才会被编码成4-6个字节。 计算机系统通用的字符编码工作方式 在计算机内存中使用Unicode编码，当需要保存到硬盘或者需要传输时，就转换为UTF-8编码 在显示时，文件会以Unicode的形式显示（使用记事本编辑时） 在存储时，文件会以UTF-8的形式存储于硬盘 在浏览网页时，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器 python的字符串 对于单个字符的编码，有ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符 &gt;&gt;&gt; ord(&apos;A&apos;) 65 &gt;&gt;&gt; ord(&apos;中&apos;) 20013 &gt;&gt;&gt;chr(66) &apos;B&apos; &gt;&gt;&gt;chr(255991) &apos;文&apos; python 的字符串类型是str，如果在网络上传输或者保存到磁盘上，就需要把str变为以字节为单位的bytes(bytes中每个字符都只占用一个字节) python 对bytes类型的数据用带b前缀的单引号或双引号表示 x = b&apos;ABC&apos; 以Unicode表示的str通过encode()方法可以编码为指定的bytes， 例如 &gt;&gt;&gt; &apos;ABC&apos;.encode(&apos;ascii&apos;) b&apos;ABC&apos; &gt;&gt;&gt; &apos;中文&apos;.encode(&apos;utf-8&apos;) b&apos;\\xe4\\xb8\\xad\\xe6\\x96\\x87&apos; &gt;&gt;&gt; &apos;中文&apos;.encode(&apos;ascii&apos;) Traceback (most recent call last): File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt; UnicodeEncodeError: &apos;ascii&apos; codec can&apos;t encode characters in position 0-1: ordinal not in range(128) 如果要把bytes变为str，就需要用decode()方法： &gt;&gt;&gt; b&apos;ABC&apos;.decode(&apos;ascii&apos;) &gt;&gt;&gt; ABC&apos; len()函数计算的是str的字符数，若换成bytes，len()函数就计算字节数： &gt;&gt;&gt; len(b&apos;ABC&apos;) &gt;&gt;&gt; 3 &gt;&gt;&gt; len(&apos;中文&apos;.encode(&apos;utf-8&apos;)) &gt;&gt;&gt; 6 当源代码中包含中文时，让保存源代码时，应务必指定保存为utf-8编码读取，我们通常在文件开头写上这两行： #!/usr/bin/env python3 # -*- coding: utf-8 -*- 第一行注释是为了告诉linux/OS X系统，这是一个python可执行程序，Windows会忽略这个注释； 第二行注释是为了告诉python解释器，按照utf-8读取源代码，否则，源代码中的中文输出可能有乱码 格式化输出格式化的字符串。 “亲爱的XXX你好！你XX月的话费是XX，余额是XX” xxx是根据变量变化的，所以，需要一种简便的格式化字符串的方式 python中与c语言一致，用%实现 &gt;&gt;&gt; &apos;Hello,%s&apos; %&apos;world&apos; &apos;Hello,world&apos; &gt;&gt;&gt; &apos;Hi,%s,you have $%d.&apos; % (&apos;Michael&apos;,1000000) &apos;Hi,Michael,you have $1000000.&apos; 常见的占位符有： 占位符 意义 %d 整数 %f 浮点数 %s 字符串 %x 十六进制整数 在不确定用什么的情况下，%s永远起作用。 可以把任何数据类型转换为字符串。 &gt;&gt;&gt; &apos;Age: %s. Gender: %s&apos; % (25,True) &apos;Age: 25. Gender: True&apos; 其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数 &gt;&gt;&gt; &apos;%2d-%02d&apos; % (3,4) &apos; 3-04&apos; 2代表位数为两位，添了0代表前面补0. &gt;&gt;&gt; &apos;%03d - %003d&apos; % (3,4) &apos;003 - 004&apos; 如果原本字符串里就有%，则需要转义，用%%表示一个%： &gt;&gt;&gt; &apos;growth rate: %d %%&apos;%7 &apos;growth rate: 7 %&apos;","categories":[{"name":"techn","slug":"techn","permalink":"http://yoursite.com/categories/techn/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"书籍","slug":"bookshares","date":"2017-04-09T08:13:26.000Z","updated":"2017-05-20T11:35:41.982Z","comments":true,"path":"2017/04/09/bookshares/","link":"","permalink":"http://yoursite.com/2017/04/09/bookshares/","excerpt":"","text":"今天徐州举行了徐州国际马拉松 很盛大的比赛 可惜没有去当志愿者嘻嘻嘻 可能年老了就没力气去跑这么长距离的比赛了 今天学校还进行了全国大学生英语竞赛 感触就是：题很多 题型和初高中做的类型相似 以后还是要好好学英语 继续跟冯子琪琪一起好好背单词啊 周五三叔跟我讲： 车到山前必有路把复杂的往简单了想往简单了做 这和长航跟我讲过得话不谋而合 要先开始做好一件件小事才能聚沙成塔 发现了一个kindle上的整理笔记的应用，来自于kindlefere很好用 附加的还发现了很多有趣的图书网站很棒也还是在kindlefere 《以箭为翅》作者：简禎《瓦尔登湖》作者：梭罗","categories":[{"name":"techn","slug":"techn","permalink":"http://yoursite.com/categories/techn/"}],"tags":[{"name":"share","slug":"share","permalink":"http://yoursite.com/tags/share/"}]},{"title":"路径定位问题","slug":"code-src","date":"2017-03-10T15:33:51.000Z","updated":"2017-05-20T11:35:19.801Z","comments":true,"path":"2017/03/10/code-src/","link":"","permalink":"http://yoursite.com/2017/03/10/code-src/","excerpt":"","text":"前言 现在一个被src困扰的我尤其是被相对路径困扰的我src 相对路径 相对路径实际就是调用当前目录下面的文件 我在桌面建一个aa的文件夹，里面一个index.html，再建一个image文件夹，放一张图片为image1.jpg 例：绝对路径：C:\\Documents and Settings\\Administrator\\桌面\\aa\\image\\image1.jpg相对路径：aa/Image/image1.jpg 上级文件夹../ 上上级文件夹../../ ##好了还是没解决再试一下 最终还是无法用本地图片来进行文章中图片的插入，所以使用了图库来现将图片上传获得链接后再插入图片了。 但还是很奇怪，为什么插入不了图片呢。文件路径也是对的。。存疑。","categories":[{"name":"techn","slug":"techn","permalink":"http://yoursite.com/categories/techn/"}],"tags":[{"name":"存疑","slug":"存疑","permalink":"http://yoursite.com/tags/存疑/"}]}]}